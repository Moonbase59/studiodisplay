; example.cfg
;
; Example configuration file for StudioStatus/StudioDisplay/SignalPi.
; Copy this file to <yourhostname.cfg>, then edit the copy.
;
; Copyright © 2018 Matthias C. Hormann (@Moonbase59, mhormann@gmx.de)
; Maintained at: https://github.com/Moonbase59/studiodisplay
;
; This file is part of StudioDisplay.
;
; StudioDisplay is free software: you can redistribute it and/or modify
; it under the terms of the GNU General Public License as published by
; the Free Software Foundation, either version 3 of the License, or
; (at your option) any later version.
;
; StudioDisplay is distributed in the hope that it will be useful,
; but WITHOUT ANY WARRANTY; without even the implied warranty of
; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
; GNU General Public License for more details.
;
; You should have received a copy of the GNU General Public License
; along with StudioDisplay.  If not, see <http://www.gnu.org/licenses/>.
;
; ---
;
; Diese Datei ist Teil von StudioDisplay.
;
; StudioDisplay ist Freie Software: Sie können es unter den Bedingungen
; der GNU General Public License, wie von der Free Software Foundation,
; Version 3 der Lizenz oder (nach Ihrer Wahl) jeder neueren
; veröffentlichten Version, weiter verteilen und/oder modifizieren.
;
; StudioDisplay wird in der Hoffnung, dass es nützlich sein wird, aber
; OHNE JEDE GEWÄHRLEISTUNG, bereitgestellt; sogar ohne die implizite
; Gewährleistung der MARKTFÄHIGKEIT oder EIGNUNG FÜR EINEN BESTIMMTEN ZWECK.
; Siehe die GNU General Public License für weitere Details.
;
; Sie sollten eine Kopie der GNU General Public License zusammen mit diesem
; Programm erhalten haben. Wenn nicht, siehe <http://www.gnu.org/licenses/>.
;
;-------------------------------------------------------------------------------
;
; All MQTT topics MUST have a trailing "/"!
; Design decision: Internally, on the MQTT message bus, we always
; work with metric units, these need to be converted as needed.
;
; Clients have their "base" topic set in "client_topic"
; and can have the following implemented in a unfied way:
;   client_topic/connected -- Connection status (0, 1, 2)
;   client_topic/status/… -- Status reports (usually retained)
;   client_topic/set/… -- Change/action requests (never retained)
;   client_topic/get/… -- Active get, publishes in status (never retained)
;   client_topic/command/… -- Command channel (never retained)
;
; If a device has a non-empty "publish_topic", this will be used for
; status updates instead of the standard "client_topic/status/…".
; This way, a device can have its unique connected/get/set/command interface
; while still publishing into a common hypothetical "item" like "the Studio".
;
; For pure signalling devices, a non-empty "subscribe_topic" will be used.
; This way, we can keep the device-dependent topics as above.
;
; For more than one device of the same kind,
; use different client_id and client_topic like so:
;   client_id = device1
;   client_topic = device/1/
;
; Quality of Service:
;   QoS 0 is no guaranteed delivery, no duplicates possible
;   QoS 1 (guaranteed delivery, duplicates possible) should be avoided.
;   QoS 2 is guaranteed delivery, no duplicates possible

[mqtt]
; ALL modules read from this section to find their broker connection data
; For simplicity and energy-saving, we run the MQTT broker
; on the first StudioDisplay (a Raspberry Pi 3B or 3B+).
host = studiodisplay1
; Port to use. Usually 1883 for insecure, 8883 for secure connections.
port = 1883
; This is the port the web client(s) use.
websockets_port = 9001
; Base topic to distinguish different users, etc. Can be left empty.
base_topic =
; User name to be used for the MQTT broker. Can be left empty
username =
; Password for the MQTT broker. Can be left empty.
password =

[localization]
; Currently, only the web client and the Weather Underground
; use localization features.
; JavaScript-type locale, i.e. "de-DE" or "en-GB"
;locale = de-DE
;
; Units:
;   temperature: C,F,K (Celsius, Fahrenheit, Kelvin)
;   speed: km/h,mph,m/s (kilometers/miles per hour, meters/second)
;   pressure: hPa,mbar,mmHg,inHg,bar,Pa (hektopascal, millibar, mm Hg, in Hg, bar, Pascal)
;   precipitation: mm/in for millimeters or inches
;   snowfall: cm/in for centimeters or inches
;   elevation: m/ft for meters or feet
; Speed, pressure, precipitation and snowfall have selectable precision.
;
; All these are now defined within the locale files, as special entries
; featuring a leading dot (".temperature", ".temperature_text").
; I still leave the description here since JSON files can’t have comments.
; The Javascript will perform all needed calculations (we use metric values
; internally) and take care of handling HTML elements like this:
;   <span class="i18n">.temperature_text</span>
; or (preferred)
;   <span class=".temperature"></span>
; Both will fill the inner HTML of the element with the current
; contents of ".temperature_text" as specified in the language file.

[callmonitor-fritz]
client_id = callmonitor1
; connected, status/, get/, set/, command/ are internally appended to client_topic
; format: device/id/ (id CAN be something else than a number)
client_topic = callmonitor/1/
; We need studio/1/status/ here since the broadcasting software
; can also do stuff with calls (i.e., take them on air).
publish_topic = studio/1/status/
; interact with kodi (i.e. pause/resume on connected call)?
kodi = True
; Set "Topic prefix" in your KODI’s MQTT Adapter accordingly, i.e. "kodi/1/"!
kodi_command_topic = kodi/1/command/
; (your own) phone numbers to react on
; set like they appear in Fritz!Box (maybe +491234123456, 01234123456, 123456)
; multiple phone numbers can be separated by blank, comma, colon, semicolon
phonenumbers = 123456
; For translation of notification texts to KODI.
locale = de-DE

[radio]
client_id = radio1
; connected, status/, get/, set/, command/ are internally appended to client_topic
; format: device/id/ (id CAN be something else than a number)
client_topic = radio/1/
; after so many seconds of no stream data, we declare it a connection error
timeout = 5
; after an error, we wait so many seconds before attempting a reconnection
retry_wait = 10
; after a config change, we wait so many seconds before reconnecting
; this is mainly for manual updates (might want to change url & encoding)
config_wait = 10
; results published as JSON data? (set to False or web page will break!)
json = False
; URL must be the real stream URL, *not* a playlist URL!
; Encoding: Empty string or None for auto-detect, else 'utf-8', 'latin1', …

; Radio Paranoid (.net)
; url = http://streamplus31.leonex.de:35194
; encoding = latin1

; Radio Paranoid (.de)
url = http://stream.radio-paranoid.de:8000/stream.mp3
encoding =

; Radio Caroline
; url = http://sc6.radiocaroline.net:8040
; encoding = utf-8

; Foerde-Radio Main
; url = http://80.86.85.56:8000
; encoding = utf-8

; Hallo Kölsch
; url = http://188.40.66.74:9000/stream/2/
; encoding = utf-8

[idjc]
client_id = idjc1
; connected, status/, get/, set/, command/ are internally appended to client_topic
; format: device/id/ (id CAN be something else than a number)
client_topic = studio/1/
; Interact with KODI (i.e. pause/resume on microphone open)?
kodi = True
; Set "Topic prefix" in your KODI’s MQTT Adapter accordingly, i.e. "kodi/1/"!
kodi_command_topic = kodi/1/command/
; For translation of notification texts to KODI.
locale = de-DE
; IDJC profile to watch
profile = default
; IDJC streams to watch (not all streams up makes YELLOW blink)
streams = 1,2
; IDJC channels to watch (usually microphones but may also be line-ins)
; example: Presenter, Studio guest
channels = 1,2
; Overtime: Set this to a nonzero value (seconds) if the RED light should
; start blinking to signal overtime when talking (often used: 60-120 s).
; Zero means only blink RED when a timed announcement (in the playlist) goes into overtime.
overtime = 60
; We can use silentjack for silence detection:
;   sudo apt-get install silentjack
; Connect BOTH IDJC’s "str_out_l" and "str_out_r" to silentjack
; using Patchage or qjackctl, since silentjack can only handle 1 connection itself.
; Alternatively, get & compile my version at https://github.com/Moonbase59/silentjack
silence_detection = True
silence_detection_db = -40
silence_detection_seconds = 5
; We can execute a command when IDJC starts/stops.
; This is mainly used to set up various audio setups for broadcasting.
; Upon startup, set Auto-Mute off, so we can use both headphones and speakers
idjc_launch_command = amixer sset "Auto-Mute Mode" Disabled
; Upon closing, set it back so the speakers get disabled when a headphone is connected.
idjc_quit_command = amixer sset "Auto-Mute Mode" "Line Out+Speaker"
; We can mute/unmute monitor speakers when a microphone is opened/closed.
; Typically, this is done (for ALSA) using a "amixer" command.
; You will probably have to set "Auto Mute Mode" to "Disabled" in alamixer
; for this to work with both speakers and headphones connected.
; Find out about your soundcard capabilites using "amixer scontents".
; The (shell) command to mute your monitor speakers, empty if none:
monitor_mute_command = amixer sset "Line Out" mute
; The (shell) command to unmute your monitor speakers, empty if none:
monitor_unmute_command = amixer sset "Line Out" unmute

[weather-wunderground]
client_id = weather1
; connected, status/, get/, set/, command/ are internally appended to client_topic
; format: device/id/ (id CAN be something else than a number, like %(city)s)
client_topic = weather/1/
; results published as JSON data? (set to False or web page will break!)
json = False
; Get an account at: https://www.wunderground.com/
; Create an API key at: https://www.wunderground.com/weather/api
; Put your own API key here:
wu_api_key = 0000000000000000
; updaterate in seconds (900 = 15min)
; Using the free account, we’re limited to max. 500 calls/day;
; we use 3 calls per invocation (weather, astronomy, forecast),
; so 900s (every 15 mins; 288 calls/day) seems appropriate.
; 600s (every 10 mins; 432 calls/day) is about max.,
; allowing for some headrooom in case of errors.
updaterate = 900
; Wunderground don’t use ISO country codes,
; so "Deutschland" is "DL", not "DE"!
; See: https://www.wunderground.com/weather/api/d/docs?d=resources/country-to-iso-matching
country = DL
city = Hamburg
; If country and city aren’t unique, Wunderground will return a selection list,
; which breaks the code (we wouldn’t know which to take, anyway).
; In this case, you can use EITHER (not BOTH!) of Wunderground’s "zmw" or pws"
; PWS is easier to find: It is the "Station ID" shown on Wunderground Maps.
; If pws is not empty, it will overrule country, city, and zmw values given.
pws = IHAMBURG2112
; You could also use Wunderground’s "zmw" value instead (which is harder to find).
; If zmw is not empty, it will overrule country & city values above, but not pws.
;zmw =

[weather-metno]
client_id = weather1
; connected, status/, get/, set/, command/ are internally appended to client_topic
; format: device/id/ (id CAN be something else than a number, like %(city)s)
client_topic = weather/1/
; results published as JSON data? (set to False or web page will break!)
json = False
; --- met.no parameters ---
; a user_agent MUST be given: app/version location or email,
; see https://api.met.no/doc/TermsOfService
user_agent = StudioDisplay/0.5 https://github.com/Moonbase59/studiodisplay
; forecast_type is optional (compact/complete; default=compact)
forecast_type = complete
; save_location is optional (default: ./data)
; save this to the shared memory device, saves writes to RasPi SD card
save_location = /dev/shm/weather-metno
; base_url is optional (default: https://api.met.no/weatherapi/locationforecast/2.0/)
base_url = https://api.met.no/weatherapi/locationforecast/2.0/
; --- parameters for your location ---
; country: use ISO 2-letter codes; currently unused
country = DE
city = Hamburg
; for met.no, latitude and longitude MUST be rounded to max. 4 decimal places!
latitude = 53.559
longitude = 9.923
; altitude in integer meters above sea level
elevation = 8
; timezone accepts IANA names like Europe/Berlin
; used to calculate local times, met.no delivers UTC
; this is the timezone for the location given above
timezone = Europe/Berlin
; updaterate in seconds (900 = 15min)
; metno-locationforecast will take care of caching and other met.no requirements
updaterate = 300

[astronomy]
; This can be used for getting sun/moon/phase-of-the-day information
; and to provide information to light controllers, i.e.
; make different lighting setups depending on the phase of the day.
client_id = astronomy1
; connected, status/, get/, set/, command/ are internally appended to client_topic
; format: device/id/ (id CAN be something else than a number like %(city)s
client_topic = astronomy/1/
; Only for display purposes, use 2-letter uppercase ISO country codes
country = DE
city = Hamburg
; required to calculate the astronomical conditions at your location
latitude = 53.559
longitude = 9.923
; timezone accepts IANA names like Europe/Berlin
timezone = Europe/Berlin
; updaterate in seconds
updaterate = 60
; Default lamp colors for different phases of the day.
; Lamp colors can be either 1000..40000 °K or a comma-separated RGB value
; Let’s assume a D65 daylight and make it "warmer" as the night proceeds.
night_lamp_color = 2200
astronomical_twilight_lamp_color = 2300
nautical_twilight_lamp_color = 2700
blue_hour_lamp_color = 3300
civil_twilight_lamp_color = 3600
sunrise_sunset_lamp_color = 4000
golden_hour_lamp_color = 5500
daylight_lamp_color = 6504
; There MUST be a corresponding locale file in the config folder,
; i.e. "config/lang-de-DE.json" (in gettext JSON format)!
; All measurement units are also configured there.
; This specifies how astronomy data (like the phase of the day)
; is translated for use on the MQTT bus.
locale = de-DE

[signalbox]
client_id = signalbox1
; connected, status/, get/, set/, command/ are internally appended to client_topic
; format: device/id/ (id CAN be something else than a number)
client_topic = signalbox/1/
; We subscribe to the studio status topic for displaying its status
subscribe_topic = studio/1/status/
; Initial state of the 230V switch
; For safety reasons, this cannot be blinked or flashed,
; and will not be included in the initial lamp test.
switch = off

[signalpi]
; Requires a Pi with a Pimoroni "blinkt!" module
client_id = signalpi1
; connected, status/, get/, set/, command/ are internally appended to client_topic
; format: device/id/ (id CAN be something else than a number)
client_topic = signalpi/1/
; We subscribe to the studio status topic for displaying its status
subscribe_topic = studio/1/status/
; If you want to show UVI values, set this, otherwise leave blank
; Should return offical UV Index values (0 .. n)
uv_topic = weather/1/status/uv
; Initial blinkt! LED brightness (0 .. 100%)
; The LEDs are REALLY bright, so maybe 10 is enough
brightness = 10
; Due to different mounting, LEDs might have to be in reverse order
; set this to True or False
reversed = True

[unicornlight]
; Requires a Pi with a Unicorn HAT/pHAT
client_id = unicornlight1
; connected, status/, get/, set/, command/ are internally appended to client_topic
; format: device/id/ (id CAN be something else than a number)
client_topic = unicornlight/1/
; If light_topic is set, UnicornLight will receive its light color from here.
; The color can be either 1000..40000 °K or a comma-separated RGB value.
;light_topic = astronomy/1/status/times/current/lamp_color
light_topic =
; Initial power state (on/off; actually uses brightness 0 to "power off")
power = on
; Initial Unicorn LED brightness (0 .. 100%)
; The LEDs are REALLY bright, be careful.
brightness = 100
; The color can be either 1000..40000 °K or a comma-separated RGB value
color = 6504

[webclient]
; The client_id for a web page should be left blank, so we can have many!
; The web client is stateless, i.e. no "connected".
; Commands go to ALL of them, i.e. "studiodisplay/all/command/reload".
; There is only one command: "reload", which reloads the web page.
client_id =
; connected, status/, get/, set/, command/ are internally appended to client_topic
; format: device/id/ (id CAN be something else than a number)
client_topic = studiodisplay/all/
; The title to show on the web page
title = Studio Hamburg
; Timeout in milliseconds (for the initial connection)
reconnect_timeout = 2000
; Auto-reconnect on connection failure?
; If set to true, in the event that the connection is lost, the client will
; attempt to reconnect to the server. It will initially wait 1 second before
; it attempts to reconnect, for every failed reconnect attempt, the delay will
; double until it is at 2 minutes at which point the delay will stay at 2 minutes.
reconnect = true
; topics for the web client MUST have trailing "/"
weather_topic = weather/1/status/
astronomy_topic = astronomy/1/status/
indicator_topic = studio/1/status/
radio_topic = radio/1/status/
kodi_topic = kodi/1/status/
; lat/lon are used for daylight, sunrise/sunset, moonrise/moonset calculations
latitude = 53.559
longitude = 9.923
; timezone accepts IANA names like Europe/Berlin
timezone = Europe/Berlin
; There MUST be a corresponding locale file in the config folder,
; i.e. "config/lang-de-DE.json" (in gettext JSON format)!
; All measurement units are also configured there.
locale = de-DE
